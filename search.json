[{"path":"https://docs.ropensci.org/pixelclasser/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to pixelclasser","title":"Contributing to pixelclasser","text":"reading document, probably using pixelclasser work, pleasure receive comments, suggestions bug reports.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to pixelclasser","text":"purpose pixelclasser classify RGB images using simplified form multivariate technique known Support Vector Machine. functions contains simple , designed integrated workflow one initial steps analysis images. small piece code, hope number bugs correspondingly small. simple, creating scripts using pixelclasser simple well. said , also true bugs always creep , good ideas improvements always , demonstrated peer-review process package. wish report bug propose improvement consider interesting necessary, two ways: * Open issue code repository pixelclaser: https://github.com/ropensci/pixelclasser * Send e-mail mailto:carlos.real@usc.es, used gitHub prefer private conversation. Making know used pixelclasser research badly (well) things gone, another way help improve package. Also, creating scripts (package) use pixelclasser, hesitate ask question problem.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to pixelclasser","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A pixelclasser sample session","text":"package contains set tools classify pixels digital images colour categories arbitrarily defined user. contains functions visualize distribution pixel colours images, define classification rules classify pixels store information R objects, save image files. simple version multivariate technique known Support Vector Machine (Cortes Vapnik, 1995; Bennet Campbell, 2000), adapted particular use. manuscript describing package pixelclasser use real research submitted Methods Ecology Evolution (Real et al., 2021). also describes procedure detail next paragraphs.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"the-procedure","dir":"Articles","previous_headings":"Introduction","what":"The procedure","title":"A pixelclasser sample session","text":"basic steps procedure following: One digital images JPEG TIFF format imported R. categories identify represented set (test set). values three three colour variables (bands) compose image (R, G, B) transformed proportions (r, g b). pixels image plotted plane defined two transformed variables (user can select arbitrarily) , hopefully, form separate clusters (pixel categories). user traces straight lines separate pixel clusters. Using mathematical expression rules rgb values, pixel can tested membership category (see ). Recording results tests 1 0 (pass/fail), incidence matrix build rule. result procedure, can submitted posterior analysis used create new version original image showing category pixel. second step simplifies problem makes one variables dependent two (r + g + b = 1). Moreover, transformation eliminates colour variations due differences illumination. expressions classification rules expression straight line using one comparison operators \\(<\\), \\(\\leq\\), \\(>\\) \\(\\geq\\). example: \\(r \\geq g +c\\), \\(\\) \\(c\\) slope intercept line, \\(r\\) \\(g\\) colour variables selected classification. single line can produce two classification rules.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"using-several-rules-per-category","dir":"Articles","previous_headings":"Introduction","what":"Using several rules per category","title":"A pixelclasser sample session","text":"two categories, cluster points complex shape, single rule enough. cases procedure additional steps: several rules defined category, incidence matrices created rule, incidence matrices combined & operator obtain category incidence matrix. last step equivalent estimate union incidence matrices, e \\(\\mathbf{M} = \\mathbf{M}_{1} \\cap \\mathbf{M}_{2} \\cap \\ldots \\cap \\mathbf{M}_{p}\\), p number rules.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"concave-category-shapes","dir":"Articles","previous_headings":"Introduction","what":"Concave category shapes","title":"A pixelclasser sample session","text":"caveat method rules must delimit convex polygon combine individual rule results successfully (convex polygon, line joining two internal points contained polygon). clusters convex shape. cases, cluster must divided convex sub-polygons (subcategories) rules defined . incidence matrices subcategories combined using | operator, .e. \\(\\mathbf{M} = \\mathbf{M}_{1} \\cup \\mathbf{M}_{2} \\cup \\ldots \\cup \\mathbf{M}_{s}\\), s number subcategories. Note polygon, convex , can subdivided triangles , triangles convex polygons, always possible solve problem. Note goal obtain minimal set convex polygons, complete triangulation. example presented one cases.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"the-session","dir":"Articles","previous_headings":"","what":"The session","title":"A pixelclasser sample session","text":"follows sample session illustrating method use package functions. uses example image test set created cutting small areas example image. good test set, see , enough show method works, problems.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"loading-the-functions","dir":"Articles","previous_headings":"The session","what":"Loading the functions","title":"A pixelclasser sample session","text":"package loaded usual way:","code":"library(pixelclasser)"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"image-loading-and-transforming","dir":"Articles","previous_headings":"The session","what":"Image loading and transforming","title":"A pixelclasser sample session","text":"images included package examples. goal identify pixels corresponding dead, oak ivy leaves compose image. small images fragments main image test set. actual case, one image per category used represent whole variation category:  images included package external (non R) data, loaded following code: function read_image() performs first step procedure. stores image array rgb values, proportion colour variable (.e. R /(R+G+B), ). uses functions packages jpeg tiff, uses extension file name identify one use.","code":"ivy_oak_rgb <- read_image(system.file(\"extdata\", \"IvyOak400x300.JPG\", package = \"pixelclasser\")) test_ivy_rgb <- read_image(system.file(\"extdata\", \"TestIvy.JPG\", package = \"pixelclasser\")) test_oak_rgb <- read_image(system.file(\"extdata\", \"TestOak.JPG\", package = \"pixelclasser\")) test_dead_rgb <- read_image(system.file(\"extdata\", \"TestDeadLeaves.JPG\", package = \"pixelclasser\"))"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"pixel-distributions-in-rgb-space","dir":"Articles","previous_headings":"The session","what":"Pixel distributions in rgb space","title":"A pixelclasser sample session","text":"plotting pixels lines, convenient define set colours use throughout session: next step visualize distribution pixels rgb space, two variables needed. pair variables , particular combination might produce better display clusters. matter try three possible combinations select convenient. Plotting pixels two-step procedure: void plot drawn first pixels added plot (use transparent black colour, #00000008, creates “density plot” effect):  coloured lines aid interpret graph: pixels found outside blue lines, red lines converging barycentre triangle (r, g, b) = (1/3, 1/3, 1/3), define areas colour dominant. Note graphical parameters (main example) can passed function change final appearance graph. auxiliary lines can deleted, following example, uses different colour variables create graph.  two clear pixel clusters small, noticeable, quantity pixels . Also visible linear patterns artefacts created RGB data discrete variables (eight bit common cases). appreciable following graphs, restricted area occupied pixels. following examples g b used variables x y plotting pixel classification.","code":"transparent_black <- \"#00000008\" brown <- \"#c86432ff\" yellow <- \"#ffcd0eff\" blue <- \"#5536ffff\" green <- \"#559800ff\" plot_rgb_plane(\"r\", \"b\", main = \"Image: ivy and oak\") plot_pixels(ivy_oak_rgb, \"r\", \"b\", col = transparent_black) plot_rgb_plane(\"r\", \"g\", plot_limits = F, plot_guides = F, plot_grid = F) plot_pixels(ivy_oak_rgb, \"r\", \"g\", col = transparent_black)"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"adding-the-pixels-of-the-test-images","dir":"Articles","previous_headings":"The session","what":"Adding the pixels of the test images","title":"A pixelclasser sample session","text":"following code plots pixels example image gb plane adds pixels test images, using arbitrary colours. , graphic parameters xlim ylim used limit extent plot area occupied pixels:  plot shows clusters pixels ivy_oak_rgb image correspond dead leaves (left), oak ivy (right). small areas taken test images representative whole pixel set image, cover area black pixels. surprise given single sample collected type pixel. Warning: plotting several million points R graph slow process. patient use images small possible. Using nice smartphone petapixel camera sensor capture images good artistic purposes, always efficient scientific work.","code":"plot_rgb_plane(\"g\", \"b\", xlim = c(0.2, 0.6), ylim = c(0.1, 0.33)) plot_pixels(ivy_oak_rgb, \"g\", \"b\", col = transparent_black) plot_pixels(test_oak_rgb, \"g\", \"b\", col = green) plot_pixels(test_ivy_rgb, \"g\", \"b\", col = blue) plot_pixels(test_dead_rgb, \"g\", \"b\", col = brown)"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"defining-the-rules","dir":"Articles","previous_headings":"The session","what":"Defining the rules","title":"A pixelclasser sample session","text":"Defining rules classify pixels matter tracing straight lines separate clusters. example, single line less equidistant clusters suffice separate . intermediate points arbitrarily ascribed one category. rules defined setting name rule, colour variables use, coordinates two points plane comparison operator. exact placement line arbitrary decision, method include mechanism place automatically. two methods create rule. first uses function create_rule(), receives list coordinates two points defining line selected subspace. following example, points coordinates (g, b) = (0.345, 1/3), (g,b) = (0.40, 0.10) defined position first line, selected trial error. adequate operator must included rule definition: rules described line use different comparison operator. rule_01 includes pixels left () line rule_02 right () line, .e. dead leaves fresh leaves, respectively. line can generate two rules, beware: > < define rules, points line belong category, >= <= used, points line belong two categories simultaneously. function classifies pixels can identify second type error, legitimate unclassified points, first type can pass unnoticed. second method uses place_rule(), wrapper graphics:locator() allows user select two points clicking rgb plot mouse: function returns object class rule_points can passed define_rule() parameter rule_points. second example produces vertical line (“h” horizontal lines), difficult produce hand. make code self-contained, create_rule() used vignette, using place_rule() easiest way define rules. even easier place call place_rule() call create_rule() avoid creating intermediate rule_points object: Note define_rule() rule_points object must use colour variables axis. define_rule() throws error condition hold. rule objects store values passed parameters, parameters equation line (c), textual representation equation evaluated classification function. check correctness rules, line can added plot:  order classify fresh leaves ivy oak categories, rules needed. pixels oak test image plotted used define additional rules: plot pixels rules. Line type colour set using graphical parameters lty col (see graphics::par)) ... argument plot_rule():  ivy pixels now plotted check whether rules can identify . Labels identify lines associated rules added plot, using parameter shift place conveniently:  graph shows two problems: ) part ivy pixels inside area delimited oak rules, .e. categories overlap. consequence, ivy pixels miss-classified. b) shape ivy cluster convex. solve second problem, two subcategories must defined explained . first delimited L1 L3, second L2 L3. , two new rules needed: intentional error coordinates second point rule_05, rule_03. left show later internal checks classification function allow detect . Note points can found outside blue triangle, borders implicit rules close polygons defined explicit rules, need created.","code":"rule_01 <- define_rule(\"rule_01\", \"g\", \"b\", list(c(0.345, 1/3), c(0.40, 0.10)), \"<\") rule_02 <- define_rule(\"rule_02\", \"g\", \"b\", list(c(0.345, 1/3), c(0.40, 0.10)), \">=\") rp01 <- place_rule(\"g\", \"b\") rp02 <- place_rule(\"g\", \"b\", \"v\") rule_07 <- define_rule(\"rule_07\", \"g\", \"b\", rp02, \">=\") rule_07 <- define_rule(\"rule_07\", \"g\", \"b\", place_rule(\"g\", \"b\"), \"<\") plot_rgb_plane(\"g\", \"b\", xlim = c(0.2, 0.6), ylim = c(0.1, 0.33)) plot_pixels(ivy_oak_rgb, \"g\", \"b\", col = transparent_black) plot_pixels(test_oak_rgb, \"g\", \"b\", col = green) plot_pixels(test_ivy_rgb, \"g\", \"b\", col = blue) plot_pixels(test_dead_rgb, \"g\", \"b\", col = brown) plot_rule(rule_01, lty = 2, col = brown) rule_03 <- define_rule(\"rule_03\",\"g\", \"b\", list(c(0.35, 0.30), c(0.565, 0.10)), \"<\") rule_04 <- define_rule(\"rule_04\",\"g\", \"b\", list(c(0.35, 0.25), c(0.5, 0.25)), \"<\") plot_rgb_plane(\"g\", \"b\", xlim = c(0.2, 0.6), ylim = c(0.1, 0.33), plot_limits = F, plot_guides = F) plot_pixels(test_oak_rgb, \"g\", \"b\", col = green) plot_rule(rule_01, lty = 2, col = green) plot_rule(rule_03, lty = 2, col = green) plot_rule(rule_04, lty = 2, col = green) plot_rgb_plane(\"g\", \"b\", xlim = c(0.2,0.6), ylim=c(0.1,0.33), plot_limits = F, plot_guides = F) plot_pixels(test_ivy_rgb, \"g\", \"b\", col = blue)  plot_rule(rule_02, lty = 1, col = green) label_rule(rule_02, label = expression('L'[1]*' (R'[1]*',R'[2]*')'), shift = c(0.035, -0.004), col = green)  plot_rule(rule_03, lty = 1, col = green) label_rule(rule_03, label = expression('L'[2]*' (R'[3]*',R'[5]*')'), shift = c(0.20, -0.15), col = green)  plot_rule(rule_04, lty = 1, col = green) label_rule(rule_04, label = expression('L'[3]*' (R'[4]*',R'[6]*')'), shift = c(0.19, 0.0), col = green) rule_05 <- define_rule(\"rule_05\", \"g\", \"b\", list(c(0.35, 0.30), c(0.565, 0.16)), \">=\") rule_06 <- define_rule(\"rule_06\", \"g\", \"b\", list(c(0.35, 0.25), c(0.5, 0.25)), \">=\")"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"creating-the-classifier-objects","dir":"Articles","previous_headings":"The session","what":"Creating the classifier objects","title":"A pixelclasser sample session","text":"rules defined, must included classifier objects used later classify_pixels(). function receives list objects class pixel_cat, containing information needed identify pixels belonging particular category. objects contain list objects pixel_subcat, containing list objects class pixel_rule. nested structure always three levels (rule, subcategory, category) even subcategories needed classification. simple cases, subcategory object containing rules internally added category object. consistency structure objects simplifies code classify_pixels(). Creating classifiers simple rules defined. following code defines class classifier can identify dead leaves: define_cat() needs label category, colour identify pixels image file generated, list rules define category. , list contains single rule. simple case subcategories needed list rules suffice classify pixels. See complex case. corresponding classifier living leaves : examples define_cat() detects list contains rules, subcategories, wraps object type pixel_subcat. classifier object oak pixels needs three rules: Finally, classifier ivy pixels complex, composed two subcategory objects must defined explicitly included class classifier: Note rules subcategories mixed list, sometimes subcategory object containing single rule created user creating category object. define_cat() checks type objects list complains adequate.","code":"cat_dead_leaves <- define_cat(\"dead_leaves\", blue, rule_01) cat_living_leaves <- define_cat(\"living_leaves\", yellow, rule_02) cat_oak_leaves <- define_cat(\"oak_leaves\", green, rule_02, rule_03, rule_04) subcat_ivy01 <- define_subcat(\"ivy01\", rule_02, rule_06) subcat_ivy02 <- define_subcat(\"ivy02\", rule_04, rule_05)  cat_ivy_leaves <- define_cat(\"ivy_leaves\", yellow, subcat_ivy01, subcat_ivy02)"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"classifying-the-pixels","dir":"Articles","previous_headings":"The session","what":"Classifying the pixels","title":"A pixelclasser sample session","text":"Function classify_pixels() uses list categories classify pixels. preliminary example, example image classified dead living leaves. parameters object classify list category objects: Note category named unclassified automatically added classes defined user. rule set used example, unclassified class must contain zero pixels. function outputs counts pixels classes, useful verify consistency rules. function also detects duplicate pixels, e counted one class (sum pixels class larger total number pixels). consistency rules verified, messages can suppressed verbose = FALSE function call. result can saved JPEG (TIFF) file: type file automatically selected file name (JPEG TIFF files allowed). Note use quality parameter, passed underlying function, set quality JPEG file produced maximum value. final classification includes three categories: function informs several points left unclassified. consequence error definition rule_05 noted . error corrected, image classified : result correct can saved, TIFF file case: following figure shows original image results two classifications.  Dead fresh leaves correctly differentiated first classification. second classification accurate dead oak pixels , expected, part ivy pixels miss-classified oak pixels overlap two categories.","code":"dead_live_classified <- classify_pixels(ivy_oak_rgb, cat_dead_leaves, cat_living_leaves) #> Pixels in category dead_leaves: 80718 #> Pixels in category living_leaves: 39282 #> Pixels in category unclassified: 0 #> Duplicate pixels: 0 #> Total number of pixels: 120000 save_classif_image(dead_live_classified, \"DeadLiveClassified.JPG\", quality = 1) ivy_oak_classified <- classify_pixels(ivy_oak_rgb, cat_dead_leaves, cat_ivy_leaves, cat_oak_leaves) #> Pixels in category dead_leaves: 80718 #> Pixels in category ivy_leaves: 12077 #> Pixels in category oak_leaves: 18428 #> Pixels in category unclassified: 8777 #> Duplicate pixels: 0 #> Total number of pixels: 120000 rule_05 <- define_rule(\"rule_05\", \"g\", \"b\", list(c(0.35, 0.30), c(0.565, 0.10)), \">=\") subcat_ivy02 <- define_subcat(\"ivy02\", rule_04, rule_05) cat_ivy_leaves <- define_cat(\"ivy_leaves\", yellow, subcat_ivy01, subcat_ivy02) ivy_oak_classified <- classify_pixels(ivy_oak_rgb, cat_dead_leaves, cat_ivy_leaves, cat_oak_leaves) #> Pixels in category dead_leaves: 80718 #> Pixels in category ivy_leaves: 20854 #> Pixels in category oak_leaves: 18428 #> Pixels in category unclassified: 0 #> Duplicate pixels: 0 #> Total number of pixels: 120000 save_classif_image(ivy_oak_classified, \"IvyOakClassified.TIFF\")"},{"path":"https://docs.ropensci.org/pixelclasser/articles/pixelclasser.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A pixelclasser sample session","text":"Bennet, K. P. C. Campbell (2000). Support vector machines: hype Halleluiah. SIGKDD Explorations 2, 1–11. Cortes, C. V. Vapnik (1995). Support-vector networks. Machine Learning 20, 273–297. Real, C., Cruz de Carvalho, R., García-Seoane, R., Branquinho, C. Varela, Z. (2021). simplified support vector machine method image classification. Submitted Methods Ecology Evolution.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlos Real. Author, maintainer. Quentin Read. Reviewer.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Real C (2024). pixelclasser: Classifies Image Pixels Colour. R package version 1.0.0, https://github.com/ropensci/pixelclasser.","code":"@Manual{,   title = {pixelclasser: Classifies Image Pixels by Colour},   author = {Carlos Real},   year = {2024},   note = {R package version 1.0.0},   url = {https://github.com/ropensci/pixelclasser}, }"},{"path":"https://docs.ropensci.org/pixelclasser/index.html","id":"pixelclasser","dir":"","previous_headings":"","what":"Classifies Image Pixels by Colour","title":"Classifies Image Pixels by Colour","text":"package contains set tools classify pixels digital images colour categories arbitrarily defined user. simple version multivariate technique known Support Vector Machine, adapted particular use. procedure simple. digital image JPEG TIFF format imported R. original image contains three colour variables (bands): (R), (G), (B). first step transform proportions ((r), (g) (b)), simplifies problem bivariate one. pixels test images can represented plane defined two variables (user judges two convenient trial error) , hopefully, form separate clusters (pixel categories). user traces straight lines (classification rules) enclose pixel clusters. Using mathematical expression rules values transformed variables, pixel can classified one category. produces set logical matrices (incidence matrices) indicating pixels belong category, stored appropriate R objects. can submitted posterior analysis used create new version original image showing category pixel. pixelclasser contains functions visualize pixels images rules created user, create rules store objects can passed function classify_pixels() analysis image, functions import export original classified images.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Classifies Image Pixels by Colour","text":"can install last version rOpenSci repository GitHub using packages remotes devtools, install remotes","code":"remotes::install_github(\"ropensci/pixelclasser\", build_vignettes = TRUE) devtools::install_github(\"ropensci/pixelclasser\", build_vignettes = TRUE)"},{"path":"https://docs.ropensci.org/pixelclasser/index.html","id":"using-pixelclasser","dir":"","previous_headings":"","what":"Using pixelclasser","title":"Classifies Image Pixels by Colour","text":"manual description function use examples file /doc/pixelclasser_1.0.0.pdf (see link source code right), contents can found Reference section website. example session described vignette included package, can accessed installation usual way: also can accessed section Get started top menu page.","code":"vignette(\"pixelclasser\")"},{"path":"https://docs.ropensci.org/pixelclasser/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Classifies Image Pixels by Colour","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":null,"dir":"Reference","previous_headings":"","what":"Classifies the pixels of an image — classify_pixels","title":"Classifies the pixels of an image — classify_pixels","text":"Classifies pixels represented object class transformed_image using rules contained list objects class pixel_cat.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classifies the pixels of an image — classify_pixels","text":"","code":"classify_pixels(image_prop, ..., unclassed_colour = \"black\", verbose = TRUE)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classifies the pixels of an image — classify_pixels","text":"image_prop array containing image. must object produced function read_image(). ... list objects class pixel_cat containing classification rules. unclassed_colour character string setting colour assigned unclassified pixels. Defaults \"black\". verbose logical value. TRUE (default) function prints statistics classification.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classifies the pixels of an image — classify_pixels","text":"Returns object class classified_image, list   containing nested lists. first-level element corresponds one   pixel categories name category name. contains   second-level list, following elements: colour: matrix defining colour paint pixels   classified image. Inherited pixel_class object defining   class. incid_mat: logical matrix TRUE values indicate   pixel belongs pixel category.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classifies the pixels of an image — classify_pixels","text":"function generates set incidence matrices indicating   whether pixel belongs pixel category . additional matrix   identifies pixels belong defined categories, e   unclassed pixels. Depending rules defined, can void   contain pixels, always present named unclassified. create incidence matrices category, matrix rule   created combined matrices using   operator. set subcategories used, procedure   subcategory matrices subcategories combined ,   time using operator. See help   define_subcat details. unclassed_colour can specified form understood   grDevices::col2grb.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/classify_pixels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classifies the pixels of an image — classify_pixels","text":"","code":"# The series of steps to classify a image supplied in the package  yellow <- \"#ffcd0eff\" blue <- \"#5536ffff\"  ivy_oak_rgb <- read_image(system.file(\"extdata\", \"IvyOak400x300.JPG\",                           package = \"pixelclasser\"))  rule_01 <- define_rule(\"rule_01\", \"g\", \"b\",                        list(c(0.345, 1/3), c(0.40, 0.10)), comp_op = \"<\") rule_02 <- define_rule(\"rule_02\", \"g\", \"b\",                        list(c(0.345, 1/3), c(0.40, 0.10)), comp_op = \">=\")  cat_dead_leaves <- define_cat(\"dead_leaves\", blue, rule_01) cat_living_leaves <- define_cat(\"living_leaves\", yellow, rule_02)  ivy_oak_classified <- classify_pixels(ivy_oak_rgb, cat_dead_leaves,                         cat_living_leaves) #> Pixels in category dead_leaves: 80718 #> Pixels in category living_leaves: 39282 #> Pixels in category unclassified: 0 #> Duplicate pixels: 0  #> Total number of pixels: 120000"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a category object — define_cat","title":"Creates a category object — define_cat","text":"Creates object class pixel_cat, contains list objects class pixel_subcat.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a category object — define_cat","text":"","code":"define_cat(cat_name, cat_colour, ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a category object — define_cat","text":"cat_name character string containing name category. cat_colour character string defining colour paint pixels creating classified picture. ... list pixel_subcat objects, pixel_rule objects case subcategories needed. mixed list pixel_rule pixel_subcat objects allowed.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a category object — define_cat","text":"list class pixel_cat following elements:  name: character string containing name   pixel category. colour: character string describing   colour pixels category classified images. subcats: list containing subcategories. names   names elements list.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a category object — define_cat","text":"function receives list objects class pixel_subcat   creates list class pixel_cat . However, cases   need subcategories, e need set rules,need   single set rules, can passed function, creates   internal subcategory object contain . See examples . Note error pass mixture pixel_rule   pixel_subcat objects. colour can specified form understood   grDevices::col2grb.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a category object — define_cat","text":"","code":"# The rules are not consistent, they are only useful as examples rule01 <- define_rule(\"R01\", \"g\", \"b\",                       list(c(0.35, 0.30), c(0.45, 0.10)), \">=\") rule02 <- define_rule(\"R02\", \"g\", \"b\",                       list(c(0.35, 0.253), c(0.45, 0.253)), \">=\") rule03 <- define_rule(\"R03\", \"g\", \"b\",                       list(c(0.35, 0.29), c(0.49, 0.178)), \">=\") rule04 <- define_rule(\"R04\", \"g\", \"b\",                       list(c(0.35, 0.253), c(0.45, 0.253)), \"<\")  subcat01 <- define_subcat(\"Subcat01\", rule01, rule02) subcat02 <- define_subcat(\"Subcat02\", rule03, rule04)  cat01 <- define_cat(\"Cat01\", \"#ffae2a\", subcat01, subcat02)  # A single category defined by a set of rules, not subcategories cat02 <- define_cat(\"Cat02\", \"#00ae2a\", rule01, rule02, rule03)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a rule object — define_rule","title":"Creates a rule object — define_rule","text":"Creates object class pixel_rule line rgb space, defined user, relational operator.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a rule object — define_rule","text":"","code":"define_rule(rule_name, x_axis, y_axis, rule_points, comp_op)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a rule object — define_rule","text":"rule_name character string containing name rule. x_axis character string selecting colour variable used x axis, one \"r\", \"g\" \"b\". y_axis character string selecting colour variable used y axis, one \"r\", \"g\" \"b\". rule_points either object  class \"rule_points\" created function place_rule(), list containing coordinates two points defining line. comp_op character string containing one comparison operators \">\", \">=\", \"<\", \"<=\".","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a rule object — define_rule","text":"list class pixel_rule containing following elements:  rule_name: character string containing rule name. rule_text: character string containing mathematical   expression rule. comp_op: character string containing comparison operator   used rule. : numerical vector containing parameter   (slope) line. c: numerical vector containing parameter c   (intercept) line. x_axis: character string containing colour variable   selected x axis. y_axis: character string containing colour variable   selected y axis. first_point: numerical vector containing coordinates   first point used estimate line equation. second_point: numerical vector containing coordinates   second point.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a rule object — define_rule","text":"function estimates slope () intercept   (c) line y = ax + c using coordinates two   points line. x y two colour variables selected   user (r, g, b). line divides plane   two subsets comparison operator selects subset contains   points (pixels) interest. list two points passed rule_points, internally   converted object class rule_points. pair points used define line constrained belong   area occupied pixels, used plot_rule()   start end plotted line. Therefore, extremes line   can selected convenient way, provided line divides   correctly categories. Convenience means line seem nice   plot, matters. variables transformed proportions, pixel   always inside triangle defined points (0, 0), (1, 0), (0,   1). , sides triangle can considered implicit rules   need created. way, single line creates two   polygons cutting triangle two. implicit rules can reduce   number rules create cases.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a rule object — define_rule","text":"","code":"# Creating the line by passing the coordinates of two points on the line: rule01 <- define_rule(\"rule01\", \"g\", \"b\",                       list(c(0.35, 0.30), c(0.45, 0.10)),\">\")  # A vertical line as a rule; note that the equation is simplified rule02 <- define_rule(\"rule02\", \"g\", \"b\",                       list(c(0.35, 0.30), c(0.35, 0.00)), \">\") if (FALSE) { # Creating the rule by passing an object of type rule_point: rule_points01 <- place_rule(\"g\", \"b\") rule03 <- define_rule(\"rule03\", \"g\", \"b\", rule_points01,\">\")  # Note that the creation of the intermediate object can be avoided: rule04 <- define_rule(\"rule04\", \"g\", \"b\", place_rule(\"g\", \"b\"),\">\") }"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a subcategory object — define_subcat","title":"Creates a subcategory object — define_subcat","text":"Creates object class pixel_subcat list objects class pixel_rule.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a subcategory object — define_subcat","text":"","code":"define_subcat(subcat_name, ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a subcategory object — define_subcat","text":"subcat_name character string containing name subcategory. ... list objects class pixel_rule.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a subcategory object — define_subcat","text":"object class pixel_subcat, list   following elements:  name character string containing name   subcategory. rules_list list  pixel_rule objects.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a subcategory object — define_subcat","text":"shape cluster pixels belonging one category   convex, rules become inconsistent (lines cross awkward ways)   classification produced erroneous. solve problem,   complete set rules divided several subsets (subcategories)   break original non-convex shape set convex polygons. Note   polygon can divided number triangles, problem   always solution. However, many cases (one presented   pixelclasser vignette) complete triangulation needed. Internally, classify_pixels() classifies points belonging   subcategory joins incidence matrices using   operator, create matrix whole category.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/define_subcat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a subcategory object — define_subcat","text":"","code":"rule01 <- define_rule(\"R01\", \"g\", \"b\",                       list(c(0.35, 0.30), c(0.45, 0.10)), \">=\") rule02 <- define_rule(\"R02\", \"g\", \"b\",                       list(c(0.35, 0.253), c(0.45, 0.253)), \">=\")  subcat01 <- define_subcat(\"Subcat_01\", rule01, rule02)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a label to the rule — label_rule","title":"Adds a label to the rule — label_rule","text":"function adds label line represents rule plot created plot_rgb_plane().","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a label to the rule — label_rule","text":"","code":"label_rule(rule, label = \"\", shift = c(0, 0), ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a label to the rule — label_rule","text":"rule object class pixel_rule. label string label line. attached coordinates start (first point) line. shift numeric vector set displacement label start line. Expressed graph units, defaults c(0, 0). ... additional graphical parameters passed underlying graphics::text() function.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a label to the rule — label_rule","text":"function return value.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a label to the rule — label_rule","text":"function uses information stored pixel_rule object   plot label start line. shift values, expressed   plot coordinates, added coordinates point place   label elsewhere. Note ... can used pass values   adj parameter underlying graphics::text() function,   also modifies position label. Use character string understood grDevices::col2rgb() set   colour label.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/label_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a label to the rule — label_rule","text":"","code":"rule_01 <- define_rule(\"rule_01\", \"g\", \"b\",                        list(c(0.1, 0.8), c(0.40, 0.10)), \"<\") plot_rgb_plane(\"g\", \"b\")  # The rule is represented as a green line plot_rule(rule_01, col = \"green\")  # And the label is added in three different positions by passing col and adj # to the underlying function label_rule(rule_01, label = expression('R'[1]*''), shift = c(0,0),            col = 'black', adj = 1.5) label_rule(rule_01, label = expression('R'[1]*''), shift = c(0.2, -0.4),            col = 'blue', adj = 0) label_rule(rule_01, label = expression('R'[1]*''), shift = c(0.3, -0.7),            col = 'black', adj = -0.5)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/pixelclasser.html","id":null,"dir":"Reference","previous_headings":"","what":"pixelclasser: Functions to classify pixels by colour — pixelclasser","title":"pixelclasser: Functions to classify pixels by colour — pixelclasser","text":"pixelclasser contains functions classify pixels image file (format jpeg tiff) colour. uses simple form technique known Support Vector Machine, adapted particular problem. original colour variables (R, G, B) transformed colour proportions (r, g, b), resulting two dimensional plane, defined convenient pair transformed variables divided several subsets (categories) one straight lines (rules) selected user. Finally, pixels belonging category identified using rules, classified image can created saved.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/pixelclasser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pixelclasser: Functions to classify pixels by colour — pixelclasser","text":"classify pixels image, series steps must done following order, using functions shown parenthesis: import image R array transformed (rgb) data (read_image()). plot pixels image plane two transformed variables shows categories pixels clearly (plot_rgb_plane(), plot_pixels). trace lines pixel clusters use create classification rules (place_rule(), define_rule, plot_rule()). combine rules define categories. Sometimes rules combined subcategories categories (define_cat(),  define_subcat()). use categories classify pixels (classify_pixels()). save results classification image, needed (save_clasif_image()). steps explained depth vignette included package.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/pixelclasser.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pixelclasser: Functions to classify pixels by colour — pixelclasser","text":"Carlos Real (carlos.real@usc.es)","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Places a line on the rgb plot — place_rule","title":"Places a line on the rgb plot — place_rule","text":"wrapper function graphics::locator makes creation rules easier.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Places a line on the rgb plot — place_rule","text":"","code":"place_rule(x_axis, y_axis, line_type = \"f\")"},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Places a line on the rgb plot — place_rule","text":"x_axis character string indicating colour variable corresponds x axis, one \"r\", \"g\" \"b\". y_axis character string indicating colour variable corresponds y axis, one \"r\", \"g\" \"b\". line_type character string indicating line vertical \"v\", horizontal \"h\" free (\"f\", default).","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Places a line on the rgb plot — place_rule","text":"list class rule_points containing following elements: x_axis: character string containing colour variable   selected x axis. y_axis: character string containing colour variable   selected y axis. first_point: coordinates start point line. second_point: coordinates end point line.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Places a line on the rgb plot — place_rule","text":"function calls graphics::locator allowing select two   points, plots line joining points returns list   containing coordinates. coordinates rearranged   pass define_rule(). True horizontal vertical lines difficult create hand.   cases, specifying \"vertical\" \"horizontal\" (partial   match allowed, e \"h\") copy appropriate coordinate value   first point second. Note done locator()   returns, plot show line joining original points,   corrected ones. Use plot_rule() see corrected line.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/place_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Places a line on the rgb plot — place_rule","text":"","code":"if (FALSE) { plot_rgb_plane(\"r\", \"g\") line01 <- place_rule(\"r\", \"g\")          # A \"free\" line line02 <- place_rule(\"r\", \"g\", \"h\")     # A horizontal line }"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the pixels of a transformed image — plot_pixels","title":"Plot the pixels of a transformed image — plot_pixels","text":"function wrapper function points() package graphics plotting pixels transformed rgb image triangular diagram previously created plot_rgb_plane().","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the pixels of a transformed image — plot_pixels","text":"","code":"plot_pixels(image_rgb, x_axis, y_axis, ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the pixels of a transformed image — plot_pixels","text":"image_rgb object produced read_image(). x_axis character string indicating colour variable use x. y_axis character string indicating colour variable use y. ... additional graphical parameters, mainly set colour (col) points.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the pixels of a transformed image — plot_pixels","text":"function return value.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the pixels of a transformed image — plot_pixels","text":"advantageous specify colour \"#00000005\"   black almost transparent. way kind density plot   created clustering points creates areas darker colour.   Note colour without specific transparency information defaults   opaque colour, \"#000000\" \"#000000ff\".   colours can specified form understandable   grDevices::col2rgb, hexadecimal string allows setting   colour transparency preferred style. Note also   points plotted using pch = \".\", symbol clutter   graph. Warning: plotting several million points R graph slow process.    patient reduce size images much possible.   nice smartphone petapixel camera sensor good   artistic purposes, always efficient scientific work.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_pixels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the pixels of a transformed image — plot_pixels","text":"","code":"# Plotting the pixels of the example image included in this package ivy_oak_rgb <- read_image(system.file(\"extdata\", \"IvyOak400x300.JPG\",                                        package = \"pixelclasser\")) plot_rgb_plane(\"g\", \"b\") plot_pixels(ivy_oak_rgb, \"g\", \"b\", col = \"#00000005\")"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"Plots plane two variables selected user (r, g b) , serve visual references, lines limiting triangular area can contain pixels (blue) areas one colour variables larger proportion values (red). Points representing pixels transformed image lines representing rules can later added plot using functions plot_pixels() plot_rule().","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"","code":"plot_rgb_plane(   x_axis,   y_axis,   plot_limits = TRUE,   plot_guides = TRUE,   plot_grid = TRUE,   ... )"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"x_axis character string indicating colour variable use x. y_axis character string indicating colour variable use y. plot_limits logical value. TRUE (default) limits area pixels can found plotted. plot_guides logical value. TRUE (default) limits area one variable dominates plotted. plot_grid logical value; TRUE (default) grid added. ... allows passing graphical parameters plotting functions.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"function return value.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"Graphical parameters can passed function modify   appearance plot. Intended passing xlim ylim   values plot part graph points concentrated. variables transformed proportions, pixel   always inside triangle defined points (0, 0), (1, 0), (0,   1). triangle plotted blue. point three variables   value (1/3, 1/3). lines joining point   centers triangle sides divide areas one three   variables higher proportions two. lines   plotted visual aids, can deleted .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rgb_plane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a triangular plot to be filled with pixels and rules — plot_rgb_plane","text":"","code":"# Simplest call plot_rgb_plane(\"g\", \"b\")   # Plane without the red lines plot_rgb_plane(\"g\", \"b\", plot_guides = FALSE)   # Restricting the plane area to show plot_rgb_plane(\"g\", \"b\", xlim = c(0.2, 0.5), ylim = c(0.0, 0.33))"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the line that defines a rule — plot_rule","title":"Plots the line that defines a rule — plot_rule","text":"function draws line defines rule plot created plot_rgb_plane().","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the line that defines a rule — plot_rule","text":"","code":"plot_rule(rule, label = \"\", ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the line that defines a rule — plot_rule","text":"rule object class pixel_rule produced define_rule(). label string label line. attached coordinates second point used define line. ... additional graphical parameters passed underlying lines() function, example define line colour dashing style. also used line label.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the line that defines a rule — plot_rule","text":"function return value.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the line that defines a rule — plot_rule","text":"function uses information stored pixel_rule   object plot line. Use ... set colour characteristics line. Use   character string understood col2rgb(). Labels can added rule using label_rule().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/plot_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the line that defines a rule — plot_rule","text":"","code":"rule_01 <- define_rule(\"rule_01\", \"g\", \"b\",                       list(c(0.345, 1/3), c(0.40, 0.10)), \"<\")  plot_rgb_plane(\"g\", \"b\") plot_rule(rule_01, col = \"green\")"},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports a jpg or tiff file. — read_image","title":"Imports a jpg or tiff file. — read_image","text":"Imports image file (JPEG TIFF format) array, converts original R, G B values file proportions (r, g b variables).","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports a jpg or tiff file. — read_image","text":"","code":"read_image(file_name)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports a jpg or tiff file. — read_image","text":"file_name character string containing name image file.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports a jpg or tiff file. — read_image","text":"Returns array dimensions r x c x 3 class  transformed_image, r c number rows   columns image. last dimension corresponds R,  G B variables (= bands) define colours   pixels. values array proportions   colour (r, g, b), .e. r = R / (R + G +   B), .","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imports a jpg or tiff file. — read_image","text":"function calls functions readJPEG()   readTIFF() packages jpeg tiff import   data R array. transforms data proportions","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/read_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports a jpg or tiff file. — read_image","text":"","code":"# An example that loads the example file included in the package ivy_oak_rgb <- read_image(system.file(\"extdata\", \"IvyOak400x300.JPG\",                                         package = \"pixelclasser\"))"},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves a classified image in TIFF or JPEG format — save_classif_image","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"Creates image file TIFF JPEG format array class classified_image.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"","code":"save_classif_image(classified_image, file_name, ...)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"classified_image object class classified_image. file_name character string name output file, including extension. ... parameters pass functions writeJPG writeTIFF. void, default values functions used.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"return anything, creates file.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"type output file (jpeg tiff) selected   extension included file name. must one (\"jpg\", \"JPG\",   \"jpeg\", \"JPEG\", \"tif\", \"TIF\", \"tiff\", \"TIFF\"). Note default value jpg quality 0.7. maximal quality set   quality = 1 using ... argument. adjustments   needed tiff files, lossless format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pixelclasser/reference/save_classif_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves a classified image in TIFF or JPEG format — save_classif_image","text":"","code":"if (FALSE) {  # Saving an hypothetical image. Note the use of quality to set the # maximum quality level in the JPEG file save_classif_image(image01_class, \"./myimages/image01_classified.jpg\",                    quality = 1) }"},{"path":"https://docs.ropensci.org/pixelclasser/reference/transform_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms RGB values into proportions (rgb values) — transform_colours","title":"Transforms RGB values into proportions (rgb values) — transform_colours","text":"function transforms array RGB absolute values similar array containing proportion band (= colour variable): r g b.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/transform_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms RGB values into proportions (rgb values) — transform_colours","text":"","code":"transform_colours(image_array)"},{"path":"https://docs.ropensci.org/pixelclasser/reference/transform_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms RGB values into proportions (rgb values) — transform_colours","text":"image_array array class image_array created function read_image().","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/transform_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms RGB values into proportions (rgb values) — transform_colours","text":"Returns array class transformed_image containing   proportions colour variable pixels image. third   dimension array named \"bands\" elements labelled   \"r\", \"g\" \"b\", respectively.","code":""},{"path":"https://docs.ropensci.org/pixelclasser/reference/transform_colours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforms RGB values into proportions (rgb values) — transform_colours","text":"proportions calculated r = R / (R + G   + B), . used function read_image().","code":""}]
